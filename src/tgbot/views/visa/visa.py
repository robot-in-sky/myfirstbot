from typing import Any

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, Message

from src.entities.visa import VisaType
from src.services.forms.choices.country import COUNTRY_OUTPUT

VISA_COUNTRY_TEXT = "–í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –≤–∞–º –Ω—É–∂–Ω–∞ –≤–∏–∑–∞?"
VISA_TYPE_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—ã"
PASSPORT_TEXT = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞"
PASSPORT_EMOJI = "ü™™"
CHECK_PASSPORT_TEXT = ("–í–æ—Ç –Ω–µ–º–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n"
                       "<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å</b>\n\n"
                       "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–∏—Ç–∞–µ—Ç—Å—è –∏ –Ω–µ—Ç –±–ª–∏–∫–æ–≤")
PASSPORT_AGAIN = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ"
PASSPORT_CHECKED_TEXT = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ"
WAITING_TEXT = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."


def visa_country_kb() -> InlineKeyboardMarkup:
    # TODO: The list of countries should not be hardcoded
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üáÆüá≥ –ò–Ω–¥–∏—è", callback_data="visa_data:country:ind")]])


async def show_country_step(message: Message) -> Message:
    return await message.answer(VISA_COUNTRY_TEXT, reply_markup=visa_country_kb())


def visa_type(type_: VisaType) -> str:
    return {
        VisaType.TOUR_30D: "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è 30 –¥–Ω–µ–π",
        VisaType.TOUR_1Y: "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è 1 –≥–æ–¥",
        VisaType.TOUR_5Y: "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è 5 –ª–µ—Ç",
    }.get(type_, type_)


def visa_type_kb() -> InlineKeyboardMarkup:
    # TODO: The types of visa should depend on the country chosen
    types = [VisaType.TOUR_30D, VisaType.TOUR_1Y, VisaType.TOUR_5Y]
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=visa_type(type_),
                              callback_data=f"visa_data:type:{type_}")] for type_ in types])


async def show_visa_type_step(message: Message) -> Message:
    return await message.edit_text(VISA_TYPE_TEXT, reply_markup=visa_type_kb())


async def show_visa_info(data: dict[str: Any], message: Message) -> Message:
    lines = [
        f"<b>–°—Ç—Ä–∞–Ω–∞</b>: {COUNTRY_OUTPUT.get(data.get("country"))}",
        f"<b>–¢–∏–ø –≤–∏–∑—ã</b>: {visa_type(data.get("type"))}",
        "\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã",
        "üöÄ –ü–æ–µ—Ö–∞–ª–∏",
    ]
    text = "\n".join(lines)
    return await message.edit_text(text)


def check_passport_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ï—â—ë —Ä–∞–∑", callback_data="passport_checked:no"),
        InlineKeyboardButton(text="‚úÖ OK", callback_data="passport_checked:yes")]])


async def show_passport_step(message: Message) -> None:
    await message.answer(PASSPORT_TEXT)
    await message.answer(PASSPORT_EMOJI)


async def show_check_passport_step(photo: InputFile | str, *, message: Message) -> Message:
    return await message.answer_photo(
        photo=photo,
        caption=CHECK_PASSPORT_TEXT,
        reply_markup=check_passport_kb())
