from collections.abc import Sequence

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, Message

from core.entities.forms import Form, Repeater, Section
from core.entities.visas import Country, Visa, VisaType
from core.services.public.form_service import COUNTRY_OUTPUT
from interfaces.tgbot.views.buttons import BACK, CONTINUE, TO_MENU

VISA_COUNTRY_TEXT = ("<b>–í–∏–∑–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>\n\n"
                     "–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω—ã:")

VISA_TYPE_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—ã"

VISA_TERMS_TEXT = ("–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                   "üìã –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã\n"
                   "ü™™ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/—Å–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞ (–∑–∞–≥—Ä–∞–Ω)\n"
                   "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–∑—ã\n\n"
                   "–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –∏ —É—Å–ª—É–≥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
                   '–ù–∞–∂–∏–º–∞—è "<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b>", –í—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

PASSPORT_TEXT = "–ò—Ç–∞–∫, –Ω–∞—á–Ω—ë–º —Å –ø–∞—Å–ø–æ—Ä—Ç–∞\n\n"
SEND_PASSPORT_TEXT = ("üì∑ <b>–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–∑–∞–≥—Ä–∞–Ω):</b>\n\n"
                      "‚Ä¢ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –±–µ–∑ –±–ª–∏–∫–æ–≤\n"
                      "‚Ä¢ –†–æ–≤–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å\n"
                      "‚Ä¢ –í—Å–µ —É–≥–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–∞–¥—Ä–µ\n"
                      "‚Ä¢ –í—Å–µ –Ω–∞–¥–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã —á–∏—Ç–∞—Ç—å—Å—è\n"
                      "‚Ä¢ –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç\n\n"
                      "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ")

IMAGE_ONLY_ONE_TEXT = "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

IMAGE_MISMATCH_ERROR_TEXT = ("‚ùå <b>–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n"
                             "–°–¥–µ–ª–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

CORNER_DETECTION_ERROR_TEXT = ("‚ùå <b>–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —É–≥–ª—ã</b>\n\n"
                               "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫—Ä–∞—è –Ω–µ –æ–±—Ä–µ–∑–∞–Ω—ã. "
                               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω. "
                               "–°–¥–µ–ª–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

OCR_ERROR_TEXT = ("‚ùå –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç\n\n"
                   "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –±–ª–∏–∫–æ–≤. "
                   "–°–¥–µ–ª–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n")

CHECK_PASSPORT_TEXT = ("–í–æ—Ç —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
                       "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å\n\n"
                       "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ö–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ—Ç—Å—è")

OCR_SUCCESS_TEXT = ("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ\n\n"
                    "<b>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø–æ–ª—è!</b>")

OCR_WARNING_TEXT = ("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é\n\n"
                    "<b>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø–æ–ª—è!</b>")

CHECKED_TEXT = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ"
WAITING_TEXT = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
START_TEXT = "üöÄ –ü–æ–µ—Ö–∞–ª–∏!"

# COUNTRY
async def show_country_step(countries: Sequence[Country], *,
                            message: Message) -> Message:
    return await message.edit_text(VISA_COUNTRY_TEXT,
                                    reply_markup=visa_country_kb(countries))


def get_flag(country: Country) -> str:
    return {
        Country.IND: "üáÆüá≥",
        Country.VNM: "üáªüá≥",
    }.get(country, "")


def visa_country(country: Country) -> str:
    flag = get_flag(country)
    output = COUNTRY_OUTPUT.get(country, country)
    return f"{flag} {output}" if flag else output


def visa_country_kb(countries: Sequence[Country]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(
                                    text=visa_country(country),
                                    callback_data=f"visa:country:{country}")] for country in countries])

# VISA TYPE
async def show_visa_type_step(visas: Sequence[Visa], *,
                              message: Message) -> Message:
    return await message.edit_text(VISA_TYPE_TEXT,
                                   reply_markup=visa_type_kb(visas))


def visa_type(type_: VisaType) -> str:
    return {
        VisaType.TOURIST: "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è",
        VisaType.BUSINESS: "–ë–∏–∑–Ω–µ—Å",
        VisaType.MEDICAL: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è",
    }.get(type_, type_)


def visa_period(period: str) -> str:
    value, unit = period[:-1], period[-1]
    digit = int(value[-1])
    units = (unit, unit, unit)
    match unit:
        case "h":
            units = ("—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤")
        case "d":
            units = ("–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
        case "m":
            units = ("–º–µ—Å", "–º–µ—Å", "–º–µ—Å")
        case "y":
            units = ("–≥–æ–¥", "–≥–æ–¥–∞", "–ª–µ—Ç")
    if digit == 1:
        unit = units[0]
    elif digit in (2, 3):
        unit = units[1]
    else:
        unit = units[2]
    return f"{value} {unit}"


def visa_type_kb(visas: Sequence[Visa]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(
                                    text=f"{visa_type(visa.type)} {visa_period(visa.period)}",
                                    callback_data=f"visa:visa_id:{visa.id}")] for visa in visas])


# VISA TERMS
async def show_visa_terms_step(visa: Visa, form: Form, *, message: Message) -> Message:
    text = "<b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∏–∑—ã</b>\n\n".upper()
    text += (f"{visa_summary(visa)}"
             f"{form_summary(form)}\n"
             f"{VISA_TERMS_TEXT}")
    return await message.edit_text(text,
                                   reply_markup=visa_terms_kb())


def visa_summary(visa: Visa) -> str:
    return (f"<b>–°—Ç—Ä–∞–Ω–∞</b>: {visa_country(visa.country)}\n"
            f"<b>–¢–∏–ø –≤–∏–∑—ã</b>: {visa_type(visa.type)}\n"
            f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</b>: {visa_period(visa.period)}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {visa.price:.0f}‚ÇΩ\n"
            f"<b>–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏</b>: {visa_period(visa.app_period)}\n"
            f"<b>–°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏</b>: {visa.proc_days_min}-{visa_period(f'{visa.proc_days_max}d')}\n")


def form_summary(form: Form) -> str:
    field_count = sum(len(s.fields) for s in form.sections if isinstance(s, Section))
    field_count += sum(1 for s in form.sections if isinstance(s, Repeater))
    return f"<b>–í–æ–ø—Ä–æ—Å–æ–≤ –≤ –∞–Ω–∫–µ—Ç–µ</b>: {field_count}\n"


def visa_terms_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=TO_MENU, callback_data="to_menu"),
        InlineKeyboardButton(text=CONTINUE, callback_data="continue")]])


# SEND PASSPORT
async def show_send_passport_step(message: Message) -> None:
    await message.answer(SEND_PASSPORT_TEXT,
                         reply_markup=send_passport_kb())


def send_passport_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=BACK, callback_data="back")]])


async def show_check_passport_step(photo: InputFile | str, *, message: Message) -> Message:
    return await message.answer_photo(
        photo=photo,
        caption=CHECK_PASSPORT_TEXT,
        reply_markup=check_passport_kb())


def check_passport_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ï—â—ë —Ä–∞–∑", callback_data="passport:retry"),
        InlineKeyboardButton(text="‚úÖ OK", callback_data="passport:ok")]])
